@startuml
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
skinparam classAttributeIconSize 0


  class MapDTO {
    - name: String
    - width: Integer
    - length: Integer
  }

  class ScenarioDTO {
    - mapDTO: MapDTO
    - scenarioName: String
    - historicalRestrictions: List<HistoricalRestriction>
    - timeRestrictions: List<TimeRestriction>
    - portBehaviors: List<PortBehavior>
    - locomotionType: String
    - generationModifiers: List<Modifier>
  }


class CreateScenarioUI

class CreateScenarioController {
  + CreateScenarioController()
  + getAvailableMaps() : List<MapDTO>
  + getMapDetails(mapName : String) : MapDTO
  + validateScenarioName(mapDTO : MapDTO, scenarioName : String) : boolean
  + createScenario(scenarioDTO : ScenarioDTO)
  - getEditorFromSession() : Editor
}

class ApplicationSession {
  - ApplicationSession()
  + {static} getInstance()
  + getCurrentSession()
}

class UserSession {
  + getEditorEmail()
}

class Repositories {
  - Repositories()
  + {static} getInstance()
  + getMapRepository() : IMapRepository
  + getScenarioRepository() : IScenarioRepository
}

interface IRepositories{
+ getMapRepository() : IMapRepository
  + getScenarioRepository() : IScenarioRepository
}

interface IMapRepository {
  + getMapList() : List<Map>
  + getMapByName(name : String) : Map
}

interface IScenarioRepository {
  + getScenarioList() : List<Scenario>
  + checkIsPresent(scenarioName : String, list : List<Scenario>) : boolean
}

class MapRepository {
  + getMapList() : List<Map>
  + getMapByName(name : String) : Map
}

class ScenarioRepository {
  + getScenarioList() : List<Scenario>
  + checkIsPresent(scenarioName : String, list : List<Scenario>) : boolean
}

class Map {
  - name : String
  - width : Integer
  - length : Integer
  + addScenario(scenario : Scenario) : boolean
}

class Scenario {
  - name : String
  - startDate : Date
  - endDate : Date
  - prodFrequency : Float
  - timeRestrictions : List<TimeRestriction>
  - portBehaviors : List<PortBehavior>
  - locomotionType : String
  - generationModifiers : List<Modifier>
  - historicalRestrictions : List<HistoricalRestriction>
}

class HistoricalRestriction {
  - event : String
}

interface IMapMapper {
  + toDTO(map : Map) : MapDTO
  + fromDTO(mapDTO : MapDTO) : Map
}

class MapMapper {
  + toDTO(map : Map) : MapDTO
  + fromDTO(mapDTO : MapDTO) : Map
}

' RELATIONS
CreateScenarioUI .> CreateScenarioController

CreateScenarioController ..> ApplicationSession
CreateScenarioController ..> UserSession
CreateScenarioController ..> MapDTO
CreateScenarioController ..> ScenarioDTO
CreateScenarioController ..> Map
CreateScenarioController ..> Scenario
CreateScenarioController .> Repositories
CreateScenarioController ..> IMapMapper
CreateScenarioController ..> IMapRepository
CreateScenarioController ..> IScenarioRepository

Repositories --> "1" IMapRepository
Repositories --> "1" IScenarioRepository
MapRepository ..|> IMapRepository
ScenarioRepository ..|> IScenarioRepository

ApplicationSession ..> UserSession

MapRepository --> "*" Map : maps
ScenarioRepository --> "*" Scenario : scenarios
Scenario --> "*" HistoricalRestriction : restrictions
ScenarioDTO --> MapDTO
ScenarioDTO --> "*" HistoricalRestriction
Map --> "*" Scenario : scenarios

IMapMapper <|.. MapMapper
Repositories ..|> IRepositories

@enduml