@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "Player" as PLAYER
participant ":UpgradeStationUI" as UI
participant ":UpgradeStationController" as CTRL
participant "Repositories" as REPOS
participant "repositories\n:Repositories" as REPOS_SINGLETON
participant "stationRepository\n:StationRepository" as STATION_REPO
participant "upgradeBuildingRepository\n:UpgradeBuildingRepository" as UPGRADE_BUILDING_REPO
participant "ApplicationSession" as APP_SESSION
participant "appSession\n:ApplicationSession" as APP_SESSION_SINGLETON
participant "currentSession\n:CurrentSession" as CURRENT_SESSION
participant "stationMapper\n:StationMapper" as StationMapper
participant "stationListDTO\n:List<StationDTO>" as StationListDto
participant ":List<Station>" as ListStation
participant "stationList \n:List<Station>" as stationList
participant "stationDTO\n:StationDTO" as StationDto
participant "upgradeBuildingMapper\n:UpgradeBuildingMapper" as UpgradeBuildingMapper
participant "upgradeBuildingListDTO\n:List<UpgradeBuildingDTO>" as UpgradeBuildingListDto
participant ":List<UpgradeBuilding>" as ListUpgradeBuilding
participant "availableUpgradeBuildingsList \n:List<UpgradeBuilding>" as availableUpgradeBuildingsList
participant "upgradeBuildingDTO\n:UpgradeBuildingDTO" as UpgradeBuildingDto
participant "station\n:Station" as STATION
participant "upgradeBuilding\n:UpgradeBuilding" as UPGRADE_BUILDING
participant "scenario\n:Scenario" as SCENARIO

activate PLAYER

PLAYER -> UI : requests to upgrade a station
activate UI

UI --> CTRL** : create()

UI -> CTRL : getStationsAvailableForUpgrade()
activate CTRL
CTRL -> REPOS : getInstance()
activate REPOS
REPOS --> CTRL : repositories
deactivate REPOS
CTRL -> REPOS_SINGLETON : getStationRepository()
activate REPOS_SINGLETON
REPOS_SINGLETON --> CTRL : stationRepository
deactivate REPOS_SINGLETON
CTRL -> STATION_REPO : getStationsAvailableForUpgrade()
activate STATION_REPO
STATION_REPO -> stationList ** : create()
loop for each Station
    STATION_REPO -> ListStation++ : get(i)
    ListStation --> STATION_REPO-- : station
    STATION_REPO -> stationList++ : add(station)
    stationList --> STATION_REPO-- : true
end
STATION_REPO --> CTRL : stationList : List<Station>
deactivate STATION_REPO

CTRL -> StationMapper : toDTO(stationList)
activate StationMapper
StationMapper -> StationListDto ** : create()
loop for each station in stationList
    StationMapper -> ListStation : station = get(i)
    activate ListStation
    ListStation --> StationMapper : station
    deactivate ListStation
    StationMapper -> StationMapper : stationDTO = toDTO(station)
    activate StationMapper
    StationMapper -> StationDto** : createStationDTO(station)
    StationMapper -> StationListDto : add(stationDTO)
    activate StationListDto
    StationListDto --> StationMapper : true
    deactivate StationListDto
end
    StationMapper --> StationMapper : stationListDTO
    deactivate StationMapper

StationMapper --> CTRL : stationListDTO : List<StationDTO>
deactivate StationMapper

CTRL --> UI : stationListDTO
deactivate CTRL
UI -> PLAYER : shows list of stations available for upgrade
deactivate UI

PLAYER -> UI : selects a station
activate UI

UI -> CTRL : getAvailableUpgradeBuildings(station)
activate CTRL

CTRL -> STATION_REPO : getStationByID(stationID)
activate STATION_REPO
STATION_REPO --> CTRL : station
deactivate STATION_REPO

|||
CTRL -> CTRL : getCurrentDateFromSession()
activate CTRL
                CTRL -> APP_SESSION: getInstance()
                activate APP_SESSION
                    APP_SESSION -> CTRL: appSession
                deactivate APP_SESSION

                CTRL -> APP_SESSION_SINGLETON: getCurrentSession()
                activate APP_SESSION_SINGLETON
                    APP_SESSION_SINGLETON --> CTRL: currentSession
                deactivate APP_SESSION_SINGLETON

                CTRL -> CURRENT_SESSION: getCurrentScenario()
                activate CURRENT_SESSION
                CURRENT_SESSION --> CTRL: scenario
                deactivate CURRENT_SESSION

CTRL -> SCENARIO : getCurrentDate()
activate SCENARIO

SCENARIO --> CTRL : currentDate
deactivate SCENARIO

CTRL --> CTRL : currentDate
deactivate CTRL

|||
CTRL -> CTRL : getAvailableUpgradeBuildings(station, currentDate)
activate CTRL
CTRL -> REPOS : getInstance()
activate REPOS
REPOS --> CTRL : repositories
deactivate REPOS

CTRL -> REPOS_SINGLETON : getUpgradeBuildingRepository()
activate REPOS_SINGLETON

REPOS_SINGLETON --> CTRL : upgradeBuildingRepository
deactivate REPOS_SINGLETON

CTRL -> STATION : getUpgradesInstalled(station)
activate STATION

STATION --> CTRL : installedUpgradesList : List<UpgradeBuilding> (empty if no upgrades installed)
deactivate STATION

CTRL -> UPGRADE_BUILDING_REPO : getAvailableUpgradeBuildings(station, installedUpgradesList, currentDate)
activate UPGRADE_BUILDING_REPO
UPGRADE_BUILDING_REPO -> availableUpgradeBuildingsList ** : create()
loop for each UpgradeBuilding
    UPGRADE_BUILDING_REPO -> ListUpgradeBuilding++ : get(i)
    ListUpgradeBuilding --> UPGRADE_BUILDING_REPO-- : upgradeBuilding
    UPGRADE_BUILDING_REPO -> availableUpgradeBuildingsList++ : add(upgradeBuilding)
    availableUpgradeBuildingsList --> UPGRADE_BUILDING_REPO-- : true
end
UPGRADE_BUILDING_REPO --> CTRL : availableUpgradeBuildingsList : List<UpgradeBuilding>
deactivate UPGRADE_BUILDING_REPO

CTRL -> UpgradeBuildingMapper : toDTO(availableUpgradeBuildingsList)
activate UpgradeBuildingMapper
UpgradeBuildingMapper -> UpgradeBuildingListDto ** : create()
loop for each upgradeBuilding in availableUpgradeBuildingsList
    UpgradeBuildingMapper -> ListUpgradeBuilding : upgradeBuilding = get(i)
    activate ListUpgradeBuilding
    ListUpgradeBuilding --> UpgradeBuildingMapper : upgradeBuilding
    deactivate ListUpgradeBuilding
    UpgradeBuildingMapper -> UpgradeBuildingMapper : upgradeBuildingDTO = toDTO(upgradeBuilding)
    activate UpgradeBuildingMapper
    UpgradeBuildingMapper -> UpgradeBuildingDto** : createUpgradeBuildingDTO(upgradeBuilding)
    UpgradeBuildingMapper -> UpgradeBuildingListDto : add(upgradeBuildingDTO)
    activate UpgradeBuildingListDto
    UpgradeBuildingListDto --> UpgradeBuildingMapper : true
    deactivate UpgradeBuildingListDto
end
    UpgradeBuildingMapper --> UpgradeBuildingMapper : upgradeBuildingListDTO
    deactivate UpgradeBuildingMapper

UpgradeBuildingMapper --> CTRL : upgradeBuildingListDTO : List<UpgradeBuildingDTO>
deactivate UpgradeBuildingMapper

CTRL --> UI : upgradeBuildingListDTO
deactivate CTRL
UI -> PLAYER : shows valid upgrade buildings for the station
deactivate UI

PLAYER -> UI : selects building to upgrade station
activate UI

UI -> CTRL : getUpgradeBuildingByID(upgradeBuildingID)
activate CTRL
CTRL -> UPGRADE_BUILDING_REPO : getUpgradeBuildingByID(upgradeBuildingID)
activate UPGRADE_BUILDING_REPO
UPGRADE_BUILDING_REPO --> CTRL : upgradeBuilding
deactivate UPGRADE_BUILDING_REPO
CTRL --> UI : upgradeBuilding
deactivate CTRL

UI --> PLAYER : shows station's upgrade preview and asks for confirmation
deactivate UI

PLAYER -> UI : confirms upgrade
activate UI
UI -> CTRL : applyUpgrade(station, upgradeBuilding)
activate CTRL

alt installedUpgradesList is not empty
loop for each installedUpgrade
CTRL -> UPGRADE_BUILDING : isInSameExclusivityGroup(upgradeBuilding, installedUpgrade)
activate UPGRADE_BUILDING
UPGRADE_BUILDING --> CTRL : true/false
deactivate UPGRADE_BUILDING

alt true (same exclusivity group)
CTRL -> STATION : replaceBuilding(installedUpgrade, upgradeBuilding, station)
activate STATION

STATION --> CTRL : success
deactivate STATION
else false (different exclusivity group)
CTRL -> STATION : addBuilding(upgradeBuilding, station)
activate STATION

STATION --> CTRL : success
deactivate STATION
end

end
else installedUpgradesList is empty
CTRL -> STATION : addBuilding(upgradeBuilding, station)
activate STATION

STATION --> CTRL : success
deactivate STATION
end

'Devo no fim do replaceBuilding ou addBuilding guardar a station no repositorio novamente, ou guardar a alteracao em si?
CTRL --> UI : success message
deactivate CTRL

UI --> PLAYER : displays success message
deactivate UI

deactivate PLAYER
@enduml