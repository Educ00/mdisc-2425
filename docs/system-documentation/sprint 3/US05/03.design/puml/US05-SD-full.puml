@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "Player" as PLAYER_ACTOR
participant ":BuildStationUI" as UI
participant ":BuildStationController" as CTRL
participant "Repositories" as REPOS
participant "repositories\n:Repositories" as REPOS_SINGLETON
participant "stationTypeRepository\n:StationTypeRepository" as STATION_REPO
participant "mapRepository\n:MapRepository" as MAP_REPO
participant "ApplicationSession" as APP_SESSION
participant "appSession\n:ApplicationSession" as APP_SESSION_SINGLETON
participant "currentSession\n:PlayerSession" as CURRENT_SESSION
participant "stationTypeMapper \n:StationTypeMapper" as StationTypeMapper
participant ":List<StationType>" as ListStationType
participant "stationTypeList \n:List<StationType>" as stationTypeList
participant "stationTypeListDTO \n:List<StationTypeListDTO>" as StationTypeListDto
participant "stationTypeDTO \n:StationTypeDTO" as StationTypeDto
participant "stationType \n:StationType" as StationType
participant "map\n:Map" as MAP
participant "mapMapper \n:MapMapper" as MapMapper
participant "station\n:Station" as STATION
participant "stationDTO\n:StationDTO" as StationDto

activate PLAYER_ACTOR
PLAYER_ACTOR -> UI : requests to build a station
activate UI
UI --> CTRL ** : create()
UI -> CTRL : getStationTypes()
activate CTRL
CTRL -> REPOS : getInstance()
activate REPOS
REPOS --> CTRL : repositories
deactivate REPOS
CTRL -> REPOS_SINGLETON : getStationTypeRepository()
activate REPOS_SINGLETON
REPOS_SINGLETON --> CTRL : stationTypeRepository
deactivate REPOS_SINGLETON
CTRL -> STATION_REPO : getAvailableStationTypes()
activate STATION_REPO
STATION_REPO -> stationTypeList ** : create()
 loop for each StationType
        STATION_REPO -> ListStationType++ : get(i)
        ListStationType --> STATION_REPO--: stationType
        STATION_REPO -> stationTypeList++ : add(stationType)
        stationTypeList --> STATION_REPO-- : true
    end

STATION_REPO --> CTRL : stationTypeList : List<StationType>
deactivate STATION_REPO

CTRL -> StationTypeMapper : toDTO(stationTypeList)
activate StationTypeMapper
StationTypeMapper -> StationTypeListDto ** : create()
loop for each stationType in stationTypeList
    StationTypeMapper -> ListStationType : stationType = get(i)
    activate ListStationType
    ListStationType --> StationTypeMapper : stationType
    deactivate ListStationType
    StationTypeMapper -> StationTypeMapper : stationTypeDTO = toDTO(stationType)
    activate StationTypeMapper
    StationTypeMapper -> StationTypeDto** : createStationTypeDTO(stationType)
    StationTypeMapper -> StationTypeListDto : add(stationTypeDTO)
    activate StationTypeListDto
    StationTypeListDto --> StationTypeMapper : true
    deactivate StationTypeListDto
end
    StationTypeMapper --> StationTypeMapper : stationTypeListDTO
    deactivate StationTypeMapper

StationTypeMapper --> CTRL : stationTypeListDTO : List<StationTypeDTO>
deactivate StationTypeMapper

CTRL --> UI : stationTypeListDTO
deactivate CTRL
UI -> PLAYER_ACTOR : shows available station types
deactivate UI

PLAYER_ACTOR -> UI : selects station type
activate UI

UI -> CTRL : getStationTypeByID(stationTypeID)
activate CTRL
CTRL -> STATION_REPO : getStationTypeByID(stationTypeID)
activate STATION_REPO
STATION_REPO --> CTRL : stationType : StationType
deactivate STATION_REPO

opt station type is NOT "Station"
    CTRL -> StationType : calculateGeometricCenter()
    activate StationType
    StationType --> CTRL : geometricCenter
    deactivate StationType
end

CTRL --> UI : stationType
deactivate CTRL


opt station type is "Station"
    UI -> PLAYER_ACTOR : requests station center (NE, SE, NW, SW)
    deactivate UI
    PLAYER_ACTOR -> UI : provides station center
    activate UI
end

    UI -> PLAYER_ACTOR : requests station location
    deactivate UI

PLAYER_ACTOR -> UI : provides location
activate UI

UI -> CTRL : proposeStationName(location, stationType)
activate CTRL

|||
            CTRL -> CTRL : getCurrentMapFromSession()
            activate CTRL
                CTRL -> APP_SESSION: getInstance()
                activate APP_SESSION
                    APP_SESSION --> CTRL: appSession
                deactivate APP_SESSION

                CTRL -> APP_SESSION_SINGLETON: getCurrentSession()
                activate APP_SESSION_SINGLETON
                    APP_SESSION_SINGLETON --> CTRL: currentSession
                deactivate APP_SESSION_SINGLETON

                CTRL -> REPOS : getInstance()
                activate REPOS
                    REPOS --> CTRL: repositories
                deactivate REPOS

                CTRL -> REPOS_SINGLETON: getMapRepository()
                activate REPOS_SINGLETON
                    REPOS_SINGLETON --> CTRL: mapRepository
                deactivate REPOS_SINGLETON

CTRL -> MAP_REPO : getCurrentMap()
activate MAP_REPO

MAP_REPO --> CTRL : map
deactivate MAP_REPO

CTRL --> CTRL : map
deactivate CTRL

CTRL -> MAP : checkForOverbuilding(location, stationType)
activate MAP
MAP --> CTRL : false
deactivate MAP

|||

CTRL -> CTRL : getProposedStationName(location, stationType)
activate CTRL
    CTRL -> MAP : getNearestCityFromLocation(location)
    activate MAP
            MAP --> CTRL : nearestCity
        deactivate MAP

CTRL -> MAP : getProposedStationName(nearestCity, stationType)
activate MAP
MAP --> CTRL : proposedName
deactivate MAP
CTRL --> CTRL : proposedName
deactivate CTRL
CTRL --> UI : proposedName
deactivate CTRL
UI --> PLAYER_ACTOR : proposes station name

deactivate UI

alt accepts proposed name
    PLAYER_ACTOR -> UI : confirms station name
    activate UI
else rejects proposed name
    UI -> PLAYER_ACTOR : requests alternative name
    deactivate UI
    PLAYER_ACTOR -> UI : provides alternative name
    activate UI
end

UI --> PLAYER_ACTOR : shows all station data (stationType, location, center, name) and requests final confirmation
deactivate UI
PLAYER_ACTOR -> UI : confirms all data
activate UI

UI -> CTRL : buildStation(stationDTO)
activate CTRL
|||
CTRL -> CTRL : checkIfPlayerHasBudgetForStationFromSession()
activate CTRL
CTRL -> APP_SESSION : getInstance()
activate APP_SESSION
APP_SESSION -> CTRL : appSession
deactivate APP_SESSION
CTRL -> APP_SESSION_SINGLETON : getCurrentSession()
activate APP_SESSION_SINGLETON
APP_SESSION_SINGLETON --> CTRL : currentSession
deactivate APP_SESSION_SINGLETON
CTRL -> CURRENT_SESSION: getPlayerBudget()
activate CURRENT_SESSION
CURRENT_SESSION --> CTRL: budget
deactivate CURRENT_SESSION
CTRL -> StationType : getStationTypeCost()
activate StationType
StationType --> CTRL : cost
deactivate StationType
CTRL -> StationType : checkIfPlayerHasBudgetForStation(budget, cost)
activate StationType
StationType --> CTRL : true
deactivate StationType
CTRL --> CTRL : true
deactivate CTRL




CTRL -> MAP : station = buildStation(stationDTO)
activate MAP
MAP -> MapMapper : station = toModel(stationDTO)
activate MapMapper
MapMapper -> StationDto : getStationType()
activate StationDto
StationDto --> MapMapper : stationType
deactivate StationDto
MapMapper -> StationDto : getLocation()
activate StationDto
StationDto --> MapMapper : location
deactivate StationDto
MapMapper -> StationDto : getCenter()
activate StationDto
StationDto --> MapMapper : center
deactivate StationDto
MapMapper -> StationDto : getName()
activate StationDto
StationDto --> MapMapper : name
deactivate StationDto

MapMapper --> STATION** : createStation(stationType, location, center, name)
MapMapper --> MAP : station
deactivate MapMapper
MAP -> MAP : addStation(station)
activate MAP
MAP --> MAP : true
deactivate MAP
MAP --> CTRL : success
deactivate MAP
CTRL --> UI : success
deactivate CTRL
UI -> PLAYER_ACTOR : displays operation success
deactivate UI
@enduml