@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "Player" as PLAYER
participant ":UpgradeStationUI" as UI
participant ":UpgradeStationController" as CTRL
participant "Repositories" as REPOS
participant "repositories\n:Repositories" as REPOS_SINGLETON
participant "stationRepository\n:StationRepository" as STATION_REPO
participant "upgradeBuildingRepository\n:UpgradeBuildingRepository" as UPGRADE_BUILDING_REPO
participant "station\n:Station" as STATION
participant "upgradeBuilding\n:UpgradeBuilding" as UPGRADE_BUILDING
participant "scenario\n:Scenario" as SCENARIO

activate PLAYER

PLAYER -> UI : requests to upgrade a station
activate UI

UI --> CTRL** : create()

UI -> CTRL : getStationsAvailableForUpgrade()
activate CTRL

CTRL -> REPOS : getInstance()
activate REPOS

REPOS --> CTRL : repositories
deactivate REPOS

CTRL -> REPOS_SINGLETON : getStationRepository()
activate REPOS_SINGLETON

REPOS_SINGLETON --> CTRL : stationRepository
deactivate REPOS_SINGLETON

CTRL -> STATION_REPO : getStationsAvailableForUpgrade()
activate STATION_REPO
STATION_REPO --> CTRL : stationList
deactivate STATION_REPO

CTRL --> UI : stationList
deactivate CTRL

UI --> PLAYER : shows list of stations available for upgrade
deactivate UI

PLAYER -> UI : selects a station
activate UI

UI -> CTRL : getAvailableUpgradeBuildings(station)
activate CTRL

CTRL -> REPOS_SINGLETON : getUpgradeBuildingRepository()
activate REPOS_SINGLETON

REPOS_SINGLETON --> CTRL : upgradeBuildingRepository
deactivate REPOS_SINGLETON

CTRL -> SCENARIO : getCurrentDate()
activate SCENARIO

SCENARIO --> CTRL : currentDate
deactivate SCENARIO

CTRL -> STATION : getUpgradesInstalled(station)
activate STATION

STATION --> CTRL : installedUpgradesList (empty if no upgrades installed)
deactivate STATION

CTRL -> UPGRADE_BUILDING_REPO : getAvailableUpgradeBuildings(station, installedUpgradesList, currentDate)
activate UPGRADE_BUILDING_REPO
UPGRADE_BUILDING_REPO --> CTRL : availableUpgradeBuildingsList
deactivate UPGRADE_BUILDING_REPO

CTRL --> UI : availableUpgradeBuildingsList
deactivate CTRL

UI --> PLAYER : shows valid upgrade buildings for the station
deactivate UI

PLAYER -> UI : selects building to upgrade station
activate UI

UI -> CTRL : getUpgradePreview(upgradeBuilding, station)
activate CTRL

CTRL -> STATION : getPerformanceImprovement(upgradeBuilding, station)
activate STATION

STATION --> CTRL : performanceImprovement
deactivate STATION
CTRL -> UPGRADE_BUILDING : getCost(upgradeBuilding)
activate UPGRADE_BUILDING

UPGRADE_BUILDING --> CTRL : cost
deactivate UPGRADE_BUILDING
CTRL -> STATION : getUpgradePreview(upgradeBuilding, station, performanceImprovement, cost)
activate STATION

STATION --> CTRL : upgradePreview
deactivate STATION
CTRL --> UI : upgradePreview
deactivate CTRL

UI --> PLAYER : shows station's upgrade preview and asks for confirmation
deactivate UI

PLAYER -> UI : confirms upgrade
activate UI
UI -> CTRL : applyUpgrade(station, upgradeBuilding)
activate CTRL

alt installedUpgradesList is not empty
loop for each installedUpgrade
CTRL -> UPGRADE_BUILDING : isInSameExclusivityGroup(upgradeBuilding, installedUpgrade)
activate UPGRADE_BUILDING
UPGRADE_BUILDING --> CTRL : true/false
deactivate UPGRADE_BUILDING

alt true (same exclusivity group)
CTRL -> STATION : replaceBuilding(installedUpgrade, upgradeBuilding)
activate STATION

STATION --> CTRL : success
deactivate STATION
else false (different exclusivity group)
CTRL -> STATION : addBuilding(upgradeBuilding)
activate STATION

STATION --> CTRL : success
deactivate STATION
end

end
else installedUpgradesList is empty
CTRL -> STATION : addBuilding(upgradeBuilding)
activate STATION

STATION --> CTRL : success
deactivate STATION
end

CTRL --> UI : success message
deactivate CTRL

UI --> PLAYER : displays success message
deactivate UI

deactivate PLAYER
@enduml